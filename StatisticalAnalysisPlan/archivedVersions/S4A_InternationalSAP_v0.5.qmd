---
title: "Start 4 All Phase 1 - Statistical Analysis Plan"
author: "Marc Henrion"
subtitle: "v0.5 (International)"
date: "`r format(Sys.time(), '%d %B %Y')`"
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
    code-fold: true
execute:
  echo: true
  warning: false
  error: false
  message: false
bibliography: S4A_SAP.json
---

```{r setup}
#| include: false

library(tidyverse)
library(kableExtra)
library(knitr)
library(grid)
library(gridExtra)
library(bootComb)

options(knitr.kable.NA = '.')
```

# List of abbreviations

@tbl-abbr lists all abbreviations used throughout this document.

```{r abbr}
#| echo: false
#| label: tbl-abbr
#| tbl-cap: "List of abbreviations"

dfAbbr<-data.frame(
  abbr=c("ACF"),
  details=c("Active case finding; the process of actively identifying people with TB. ACF aims to identify people with TB either in those who do not recognize that they have symptoms, or those who do recognize symptoms but for whatever reason do not, or cannot, access services at health-care facilities.")
)
dfAbbr<-rbind(dfAbbr,c("CAD","Computer aided diagnostic"))
dfAbbr<-rbind(dfAbbr,c("CRP","C reactive protein; a blood inflammatory marker measured using point of care devices or laboratory assays, which is elevated in the presence of infections, inflammatory or neoplastic (cancer) conditions, including TB. WHO recommends CRP as a screening tool for TB among people living with HIV and research studies indicate CRP  could also have a use in TB screening among people not infected with HIV."))
dfAbbr<-rbind(dfAbbr,c("CXR","Chest x-ray"))
dfAbbr<-rbind(dfAbbr,c("GA","Gastric aspirate"))
dfAbbr<-rbind(dfAbbr,c("ICF","Intensified case finding at health facilities; an activity, recommended by the WHO, intended to detect possible TB cases among people attending health facilities for reasons not associated with TB (e.g. general clinics or maternity wards)."))
dfAbbr<-rbind(dfAbbr,c("IDP","Internally displaced people"))
dfAbbr<-rbind(dfAbbr,c("LAM","Lipoarabinomannan"))
dfAbbr<-rbind(dfAbbr,c("NPA","Nasopharyngeal aspiration"))
dfAbbr<-rbind(dfAbbr,c("NPV","Negative predictive value"))
dfAbbr<-rbind(dfAbbr,c("PCF","Passive case finding"))
dfAbbr<-rbind(dfAbbr,c("PLWH","People / person living with HIV"))
dfAbbr<-rbind(dfAbbr,c("POC","Point-of-care"))
dfAbbr<-rbind(dfAbbr,c("PPV","Positive predictive value"))
dfAbbr<-rbind(dfAbbr,c("RDT","Rapid diagnostic test"))
dfAbbr<-rbind(dfAbbr,c("SAP","Statistical Analysis Plan"))
dfAbbr<-rbind(dfAbbr,c("TB","tuberculosis"))
#dfAbbr<-rbind(dfAbbr,c("",""))

dfAbbr<-dfAbbr[order(dfAbbr$abbr),]

dfAbbr %>%
  kable(row.names=F,col.names=c("Abbreviation","Explanation")) %>%
  kable_styling(full_width=FALSE)
```


# Protocol version

This Statistical Analysis Plan (SAP) v0.5 is based on the Start 4 All International Protocol v1.6, dated 22 May 2023.


# Protocol summary

Start 4 All is a large, UNITAID funded 4-year tuberculosis (TB) study programme, running in 7 countries and consisting of 2 phases:

* Phase 1 (18 months) - cross-sectional surveys to generate data on diagnostic assay performances in different countries and different populations and identifying optimal diagnostic test combinations (for screening purposes).

* Phase 2 (30 months) - a large, multi-country implementation study to evaluate the chosen optiomal combinations in the different settings.

This SAP focuses on Phase 1, with a separate SAP being written for the trial in Phase 2. There will also be a separate analysis plan for the economic evaluation of the diagnostic test combinations.

## Study design

Phase 1 consists of multiple cross-sectional surveys in 7 countries and in different general and marginalised populations within those countries.

```{r countries}
#| echo: false
#| label: tbl-countries
#| tbl-cap: "Summary of study populations, countries, and procedures."

dfCountries<-data.frame(
  Population=c("Primary health care attenders","District / secondary hospital attenders","Key / marginalised populations (informal settlements, IPDs, refugees, rural poor, pastoralists)","Children"),
  CurrentApproach=c("Sympton screen; sputum smear microscopy; sputum transport for Xpert","Symptom screen; sputum Xper testing (where available); 1st gen LAM for HIV positive admissions (where avilable)","Symptom screen; mobile chest X-ray (predominantly human interpretation); sputum transport for smear/Xpert/culture","Symptom screen; Xpert testing (stool, NPA, GA, where available); X-ray (human interpretation)"),
  LocalLaboratory=c("None / basic","Medium / some with Xpert","None","Medium / some with Xpert"),
  Country=c("Bangladesh, Brazil, Cameroon, Kenya, Malawi, Nigeria, Vietnam","Bangladesh, Cameroon, Kenya, Malawi, Nigeria, Vietnam","Bangladesh, Cameroon, Nigeria","Cameroon, Nigeria"),
  XrayAvailability=c("No","Yes","Limited / mobile trucks","Yes (if in hospital)"),
  CaseFindingApproach=c("PCF / ICF","PCF / ICF","PCF / ICF / ACF","PCF / ICF / ACF"),
  PercentWithTBAmongTested=c("5-15%","10-20%","0.5-10%","8-12%"),
  AdditionTBDiagnostics=c("CAD CXR, POC CRP, CRP RDT, LAM, pooling Ultra","CAD CXR, POC CRP, CRP RDT, LAM, pooling Ultra","CAD CXR, POC CRP, CRP RDT, LAM, Pooling Ultra","CAD CXR, POC CRP, CRP RDT, LAM, pooling Ultra")
)

dfCountries %>% 
  kable(row.names=FALSE,col.names=c("Population","Currently implemented TB screening / diagnosis approach","Local laboratory","Country","X-ray availability","Case finding approach","% with TB among those testes","Additional diagnostic tests and test combinations evaluated as part of Start 4 All"),format = "html")
# %>% kableExtra::footnote(general_title="",general="NPA = nasopharyngeal aspiration, GA = gastric aspirate, CAD = computer assistant diagnostics, POC CRP = point-of-care CRP (quantitative), CRP RDT = CRP rapid diagnostic test (semiquantitative).")
```

@tbl-countries summarises the different surveys. This study design was selected because (together with diagnostic clinical trials) surveys are considered the best design for the evaluation of diagnostics. We will evaluate the performance of HIV testing, CRP, computer assisted digital X-Rays (CAD CXR), testing multiple sputum samples by pooling them together and testing the pool with a single Xpert Ultra cartridge and urine lipoarabinomannan (LAM) as screening tests for TB. Although the performance of these tests has been described among individuals with presumptive TB, there are now updated prototypes (e.g. LAM) or software (e.g. CAD CXR) for some platforms, there is limited information on their performance among key populations (e.g. nomads/internally displaced people) and hardly any information on their performance in primary health care settings.

A composite bacteriological reference standard will be used to describe the sensitivity, specificity and positive and negative predictive value of different assays and their combinations. The composite standard will classify participants as ‘bacteriologically confirmed’, if their sputum culture or Xpert Ultra (as a single test) are positive or as ‘unlikely TB’ if they have negative culture AND negative Xpert Ultra results.

@tbl-diagnostics summarises the screening assays evaluated in this study.

```{r diagnostics}
#| echo: false
#| label: tbl-diagnostics
#| tbl-cap: "Summary of screening assays evaluated in this study."

dfDiags<-data.frame(
  AssayType=c("HIV testing","Point-of-care C-Reactive Protein (quantitative)","Point-of-care C-Reactive Protein (semi-quantitative)","Urine Lateral Flow Test","Molecular diagnostic","Computer-aided detection from digital chest X-ray"),
  Assay=c("HIV","POC CRP","CRP RDT","FujiLAM","Pooled Xpert","Digital chest X-ray + Qure.ai")
)

dfDiags %>% 
  kable(row.names=FALSE,col.names=c("Assay type","Assay"),format = "html")
```

**Jan15 discussion:** Should pooled Xpert be a screening or a diagnostic / confirmatory test?

**Jan15 discussion:** Do we get individual results from the pooled Xpert or just whether at least one of the pooled samples was positive? If the latter, then a bit difficult to derived sensitivity, specificity, PPV, NPV etc.


## Study Endpoints

### Primary endpoint

Generation of robust estimates of the diagnostic accuracy and performance of TB diagnostic tests and test combinations in primary healthcare settings and key and vulnerable populations.

###	Secondary study endpoints

* Estimates of the predicted performance of TB diagnostic test combinations and how they perform in specific populations.

* Selection of the optimal TB diagnostic test combinations for implementation and scale-up in primary healthcare settings and key and vulnerable populations in terms of their cost-efficiency, feasibility, and modelled accuracy. 


## Sample size

Diagnostic test combinations for the Phase 1 cross-sectional studies are tailored by country and key populations. We envisage conducting one cross sectional study among pastoralists, one study among refugees and IDPs, one among people living in informal settlements, one among the rural poor, and 6 studies among populations in clinical facilities (total of 18 cross sectional studies across 6 countries). Each study will comprise about 600 participants, including a minimum of 100 bacteriologically confirmed participants in most populations. The key populations and number of studies for Phase 1 studies are shown below.

The sample sizes were chosen to comply with the sample size criterion required for WHO guideline development and to achieve an acceptable level of precision for the estimates of the performance of the diagnostic tests. The sample sizes are also suitable for estimating costs and cost-efficiency of the TB diagnostic combinations.

tbl-sampSizeCalc gives the number of TB cases / number of subjects at different prevalence values for TB and different values of precision for 95% CI of point estimate of number of bacteriologically confirmed TB cases identified from each sample population. Populations with low proportions (<10%) of bacteriologically confirmed TB (children, ACF in Vietnam), will use the same cross-sectional design, but the number of bacteriologically confirmed participants will be purposely enriched by inviting participants attending adjacent centers to the study centers. Once included in the study, participants will undergo all tests in the diagnostic combination.

The calculations in tbl-sampSizeCalc have been obtained using the standard Wald normal approximation:

$$
n_{unadj}=p\cdot(1-p)\cdot\left(\frac{z_{\alpha/2}}{E}\right)^2
$$
where $p$ = target proportion (sensitivity in your case; $p=0.9$), E = target precision (or margin-of-error) and $z_{\alpha/2}$ is the (two-sided) critical value from the normal distribution for significance level $\alpha$ (in our case $\alpha=0.05$ and $z_{alpha/2}=1.96$).

```{r sampSizeCalc}
#| label: tbl-sampSizeCalc
#| tbl-cap: "Sample size calculation for adults."

sampSize_OnePropCI<-function(p_hat,E=NULL,n=NULL,alpha=0.05,method="WaldNormalApprox"){
  # p_hat = expected proportion
  # E = desired error of margin (half width of the confidence interval); if specified then n gets computed
  # n = fixed sample size; if specified then E gets computed
  # alpha = 1 - confidence level
  # method = one of "WaldNormalApprox" or "WilsonScoreApprox"
  # NOTE: exactly one of n, E needs to be specified -- they cannot both be set to NULL or both be specified
  
  z<-qnorm(1-alpha/2)
  
  if(is.null(n) & !is.null(E)){
    if(method=="WaldNormalApprox"){
      n<-p_hat*(1-p_hat)*(z/E)^2
    }else if(method=="WilsonScoreApprox"){
      a<-1
      b<-(2-p_hat*(1-p_hat)/E^2)*z^2
      c<-(4*E^2-1)*(z^4)/(4*E^2)
      n<-(-b + sqrt(b^2-4*a*c))/(2*a)
    }else{stop("The method parameter needs to be one of WaldNormalApprox or WilsonScoreApprox")}
    
    return(n)
  }else if (is.null(E) & !is.null(n)){
    if(method=="WilsonScoreApprox"){warning("Argument method is set to WilsonScoreApprox but this will be ignored and WaldNormalApprox be used instead.")}
    E<-sqrt((p_hat*(1-p_hat)*z^2)/n)
    
    return(E)
  }else{
    stop("E and n cannot both be NULL or both be specified - you need to specify one of these two and leave the other unspecified / NULL.")
  }
  
}

dfSS<-data.frame(
  tbPrevalence=c(1:5,8:10,12,15,20,27)/100,
  prec5=NA,
  prec6=NA,
  prec7=NA,
  prec8=NA,
  prec10=NA,
  prec15=NA
) %>%
  mutate(
    prec5=paste(sep=" / ",ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.05)),ceiling(c(ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.05))/tbPrevalence))),
    prec6=paste(sep=" / ",ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.06)),ceiling(c(ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.06))/tbPrevalence))),
    prec7=paste(sep=" / ",ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.07)),ceiling(c(ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.07))/tbPrevalence))),
    prec8=paste(sep=" / ",ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.08)),ceiling(c(ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.08))/tbPrevalence))),
    prec10=paste(sep=" / ",ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.1)),ceiling(c(ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.1))/tbPrevalence))),
    prec15=paste(sep=" / ",ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.15)),ceiling(c(ceiling(sampSize_OnePropCI(p_hat=0.9,E=0.15))/tbPrevalence)))
  ) %>%
  mutate(tbPrevalence=paste(sep="",100*tbPrevalence,"%"))

dfSS %>%
  kable(row.names=FALSE,col.names=c("","5%","6%","7%","8%","10%","15%")) %>%
  kable_styling(full_width=FALSE) %>%
  add_header_above(c("TB prevalence"=1,"Precision"=6)) %>%
  add_header_above(c(" "=1,"Expected number microbiologically confirmed / number required in sample"=6))
```

The resulting number $n_{unadj}$ needs to be adjusted for the TB prevalence, $p_{TB}$:

$$
n_{adj}=\frac{n_{unadj}}{p_{TB}}
$$

We further need to take into account different levels of expected attrition (due to loss-to-follow-up; unusable data or other causes):

$$
n_{final}=\frac{n_{adj}}{1-p_{attr}}
$$

where $p_{attr}$ is the expected proportion of attrition.

The studies will be analyzed individually by countries, and then as a single multi-country evaluation. The latter aims to achieve the requirements of data for WHO guidance, which requests at least 250 individuals with bacteriologically confirmed TB.

As shown in @tbl-sampSizeTableByCountry, the total sample size to be enrolled varies with the average TB prevalence, target precision and expected loss-to-follow-up (individuals not completing a diagnostic process) in the individual countries and sites. However, with the assumptions shown in @tbl-sampSizeTableByCountry, and assuming an overall proportion of 50% people living with HIV (PLWH) adult participants, we estimate a sample size of 7,200 PLWH and 7,200 HIV-negative persons will include at least 548 PLWH and 548 HIV-negative persons (total 1,096) with a microbiologically confirmed diagnosis of TB.

It is expected that countries with a high burden of HIV-associated TB (Brazil, Cameroon, Kenya, Malawi, Nigeria) will recruit an even higher ratio of PLWH to HIV-negative participants. If the recruitment of PLWH is lower than expected, countries with high burden of HIV-associated TB will enrich recruitment towards this population by recruiting in HIV care and treatment clinics and outpatient centres.

The number of adult males is expected to be higher than the number of females, as more males are affected by TB and a higher proportion of males than females attend primary and secondary clinics. The proportion of participants with TB that is obtained at the end of Phase 1 may vary from the expected proportion of participants with TB due to the inclusion of ICF and ACF in the study in settings in which they are not normally applied (i.e. ICF being conducted in PHC clinics). Additionally, some populations maybe feel more encouraged or discouraged to participate in the study, which may be reflected in the proportion of TB cases for a particular setting and the reasons behind this may be elucidated during the Realist Evaluation.

```{r sampSizeTableByCountry}
#| label: tbl-sampSizeTableByCountry
#| tbl-cap: "Sample size for each survey."

dfSSCountry<-data.frame(
  country=c(rep("Cameroon",4),rep("Nigeria",4),rep("Kenya",2),rep("Bangladesh",3),rep("Brazil",2),rep("Vietnam",3),rep("Malawi",1),"TOTAL"),
  setting=c("PHC clinics","District hospital","Informal settlement / rural poor ACF","Children","PHC clinics","District hospital","Nomads","IDP / refugees","PHC clinics","District hospital","PHC clinics","District hospital","Informal settlements / rural poor ACF","PHC clinics Aracaju","PHC clinics Maceio","PHC clinics","Informal settlements ACF","Children","PHC clinics",NA),
  expectedTbProp=c(paste(sep="",c(9,8,5,4,10,20,8,12,9,20,5,3,5,15,27,2,1,0,6),"%"),NA),
  targetPrecision=c(paste(sep="",c(7,7,10,15,6.5,5.5,7,6,8,5.5,9,12,9,7,5.5,15,17,NA,8),"%"),NA),
  expectedAttrition=c(paste(sep="",c(20,12,15,20,18,18,12,20,12,18,14,16,14,5,10,20,20,NA,20),"%"),NA),
  sampleSize=c(c(1000,1000,800,500,1000,700,1000,1000,700,700,1000,1000,1000,500,500,1000,1500,500,1200),NA),
  expectedAdultTB=c(72,70,34,NA,82,114,70,96,55,114,43,26,43,71,121,16,12,NA,57,1096),
  adults=c(2800,rep(NA,3),3700,rep(NA,3),1400,NA,3000,rep(NA,2),1000,NA,2500,rep(NA,2),1200,14400),
  children=c(500,rep(NA,3),rep(NA,4),rep(NA,2),rep(NA,3),rep(NA,2),500,rep(NA,2),NA,1000)
)

dfSSCountry[dfSSCountry=="NA%"]<-NA

dfSSCountry %>%
  dplyr::select(!country) %>%
  kable(row.names=FALSE,col.names=c("Country & setting","Expected proportion with TB","Target precision","Expected attrition","Sample size","Expected adults with TB","Adults","Children"),format.args = list(big.mark = ",")) %>%
  kable_styling(full_width = FALSE) %>%
  pack_rows("Cameroon",1,4) %>%
  pack_rows("Nigeria",5,8) %>%
  pack_rows("Kenya",9,10) %>%
  pack_rows("Bangladesh",11,13) %>%
  pack_rows("Brazil",14,15) %>%
  pack_rows("Vietnam",16,18) %>%
  pack_rows("Malawi",19,19) %>%
  pack_rows("TOTAL",20,20)
```


## Objectives

### Primary objective

To evaluate the performance of selected TB screening tests and combinations of such tests.

### Secondary objectives

* To identify test combinations that increase the proportion of people diagnosed with microbiologically confirmed TB.

* To demonstrate that combinations of current and newer TB tests can facilitate using these tests in locations where they are not currently available.


# Data simulation

In order to demonstrate the planned analyses and show computer code, we will simulate data like the one expected to be generated by the study.

```{r dataSim}
#| label: tbl-dataSim
#| tbl-cap: "10 random rows from the simulated data."

set.seed(123)

sensSpecMatHiv<-data.frame(
  sens=rnorm(n=7,mean=0.8,sd=0.02),
  spec=rnorm(n=7,mean=0.8,sd=0.01)
)
rownames(sensSpecMatHiv)<-c("Cameroon","Nigeria","Kenya","Bangladesh","Brazil","Vietnam","Malawi")

sensSpecMatCrpRdt<-data.frame(
  sens=rnorm(n=7,mean=0.85,sd=0.025),
  spec=rnorm(n=7,mean=0.92,sd=0.01)
)
rownames(sensSpecMatCrpRdt)<-c("Cameroon","Nigeria","Kenya","Bangladesh","Brazil","Vietnam","Malawi")

sensSpecMatCrpPoc<-data.frame(
  sens=rnorm(n=7,mean=0.9,sd=0.02),
  spec=rnorm(n=7,mean=0.95,sd=0.01)
)
rownames(sensSpecMatCrpPoc)<-c("Cameroon","Nigeria","Kenya","Bangladesh","Brazil","Vietnam","Malawi")

sensSpecMatCrpRdt<-data.frame(
  sens=rnorm(n=7,mean=0.85,sd=0.025),
  spec=rnorm(n=7,mean=0.92,sd=0.01)
)
rownames(sensSpecMatCrpRdt)<-c("Cameroon","Nigeria","Kenya","Bangladesh","Brazil","Vietnam","Malawi")

sensSpecMatLamFuji<-data.frame(
  sens=rnorm(n=7,mean=0.82,sd=0.02),
  spec=rnorm(n=7,mean=0.9,sd=0.01)
)
rownames(sensSpecMatLamFuji)<-c("Cameroon","Nigeria","Kenya","Bangladesh","Brazil","Vietnam","Malawi")

# sensSpecMatLamBiopromic<-data.frame(
#   sens=rnorm(n=7,mean=0.83,sd=0.02),
#   spec=rnorm(n=7,mean=0.89,sd=0.01)
# )
# rownames(sensSpecMatLamBiopromic)<-c("Cameroon","Nigeria","Kenya","Bangladesh","Brazil","Vietnam","Malawi")

sensSpecMatXpertPooled<-data.frame(
  sens=rnorm(n=7,mean=0.92,sd=0.01),
  spec=rnorm(n=7,mean=0.97,sd=0.01)
)
rownames(sensSpecMatXpertPooled)<-c("Cameroon","Nigeria","Kenya","Bangladesh","Brazil","Vietnam","Malawi")

sensSpecMatCad<-data.frame(
  sens=rnorm(n=7,mean=0.88,sd=0.025),
  spec=rnorm(n=7,mean=0.88,sd=0.02)
)
rownames(sensSpecMatCad)<-c("Cameroon","Nigeria","Kenya","Bangladesh","Brazil","Vietnam","Malawi")

# sensSpecMatCadMinxray<-data.frame(
#   sens=rnorm(n=7,mean=0.87,sd=0.025),
#   spec=rnorm(n=7,mean=0.89,sd=0.02)
# )
# rownames(sensSpecMatCadMinxray)<-c("Cameroon","Nigeria","Kenya","Bangladesh","Brazil","Vietnam","Malawi")

sensSpecMatXpert<-data.frame(
  sens=rnorm(n=7,mean=0.98,sd=0.005),
  spec=rnorm(n=7,mean=0.99,sd=0.005)
)
sensSpecMatXpert$sens[sensSpecMatXpert$sens>=0.99999]<-0.99999
sensSpecMatXpert$spec[sensSpecMatXpert$spec>=0.99999]<-0.99999
rownames(sensSpecMatXpert)<-c("Cameroon","Nigeria","Kenya","Bangladesh","Brazil","Vietnam","Malawi")


dfSim<-data.frame(
  country=c(rep("Cameroon",3300),rep("Nigeria",3400),rep("Kenya",1400),rep("Bangladesh",3000),rep("Brazil",1000),rep("Vietnam",3000),rep("Malawi",1200)),
  region=c(rep("",3300+3400+1400+3000),rep("Aracaju",500),rep("Maceio",500),rep("",3000+1200)),
  setting=c(rep("PHC",1000),rep("District",1000),rep("Informal settlements ACF",800),rep("Children",500),rep("PHC",700),rep("District",700),rep("Nomads",1000),rep("IDP / refugees",1000),rep("PHC",700),rep("District",700),rep("PHC",1000),rep("District",1000),rep("Informal settlements ACF",1000),rep("PHC",1000),rep("PHC",1000),rep("Informal settlements ACF",1500),rep("Children",500),rep("PHC",1200)),
  reference=c(rbinom(n=1000,size=1,prob=0.09),rbinom(n=1000,size=1,prob=0.08),rbinom(n=800,size=1,prob=0.05),rbinom(n=500,size=1,prob=0.04),rbinom(n=700,size=1,prob=0.20),rbinom(n=700,size=1,prob=0.20),rbinom(n=1000,size=1,prob=0.08),rbinom(n=1000,size=1,prob=0.12),rbinom(n=700,size=1,prob=0.09),rbinom(n=700,size=1,prob=0.20),rbinom(n=1000,size=1,prob=0.05),rbinom(n=1000,size=1,prob=0.03),rbinom(n=1000,size=1,prob=0.05),rbinom(n=500,size=1,prob=0.15),rbinom(n=500,size=1,prob=0.27),rbinom(n=1000,size=1,prob=0.02),rbinom(n=1500,size=1,prob=0.01),rbinom(n=500,size=1,prob=0.001),rbinom(n=1200,size=1,prob=0.08))
  ) %>%
  dplyr::mutate(
    hiv=case_when(reference==0~rbinom(n=n(),size=1,prob=1-sensSpecMatHiv[country,"spec"]),reference==1~rbinom(n=n(),size=1,prob=sensSpecMatHiv[country,"sens"])),
    crpPoc=case_when(reference==0~rbinom(n=n(),size=1,prob=1-sensSpecMatCrpPoc[country,"spec"]),reference==1~rbinom(n=n(),size=1,prob=sensSpecMatCrpPoc[country,"sens"])),
    crpRdt=case_when(reference==0~rbinom(n=n(),size=1,prob=1-sensSpecMatCrpRdt[country,"spec"]),reference==1~rbinom(n=n(),size=1,prob=sensSpecMatCrpRdt[country,"sens"])),
    lamFuji=case_when(reference==0~rbinom(n=n(),size=1,prob=1-sensSpecMatLamFuji[country,"spec"]),reference==1~rbinom(n=n(),size=1,prob=sensSpecMatLamFuji[country,"sens"])),
    # lamBiopromic=case_when(reference==0~rbinom(n=n(),size=1,prob=1-sensSpecMatLamBiopromic[country,"spec"]),reference==1~rbinom(n=n(),size=1,prob=sensSpecMatLamBiopromic[country,"sens"])),
    xpertPooled=case_when(reference==0~rbinom(n=n(),size=1,prob=1-sensSpecMatXpertPooled[country,"spec"]),reference==1~rbinom(n=n(),size=1,prob=sensSpecMatXpertPooled[country,"sens"])),
    cad=case_when(reference==0~rbinom(n=n(),size=1,prob=1-sensSpecMatCad[country,"spec"]),reference==1~rbinom(n=n(),size=1,prob=sensSpecMatCad[country,"sens"])),
    #cadMinxray=case_when(reference==0~rbinom(n=n(),size=1,prob=1-sensSpecMatCadMinxray[country,"spec"]),reference==1~rbinom(n=n(),size=1,prob=sensSpecMatCadMinxray[country,"sens"])),
    xpert=case_when(reference==0~rbinom(n=n(),size=1,prob=1-sensSpecMatXpert[country,"spec"]),reference==1~rbinom(n=n(),size=1,prob=sensSpecMatXpert[country,"sens"]))
)

dfSim[sample(size=10,replace=F,x=1:nrow(dfSim)),] %>%
  kable(row.names=FALSE) %>%
  kable_styling(full_width=FALSE)
```

@tbl-dataSim shows 10 random rows from the data frame containing all `r nrow(dfSim)` simulated observations.

# Statistical Analysis Plan

The R code to generate the results is embedded in this document. By default it is hidden, but can be displayed by clicking on the `Code` boxes on the right hand side.

## General considerations

The reporting of this study will be prepared in accordance with the STROBE guidelines [@vonElmEtal2007].

All continuous data variables will be summarized using the following descriptive statistics:

* N (size of relevant analysis population)
* n (size of analysis population without missing values)
* arithmetic mean (or geometric mean if more appropriate)
* standard deviation (SD)
* median
* 25th percentile value (P25), 75th percentile value (P75) and interquartile range (IQR)
* minimum and maximum (where relevant)

The proportion / percentage of observed levels will be reported for all binary and categorical measures. When appropriate, corresponding exact 95% confidence intervals (CIs) for proportions will be included.

For statistical test, a significance level of 5% will be used. All p-values will be reported to 3 decimal digits.

### Reporting conventions

P-values $\geq 0.001$ and $\leq 0.999$ will be reported to 3 decimal places; p-values less than 0.001 will be reported as "< 0.001". The mean, standard deviation, median, IQR and other statistics will be reported to one decimal place greater than the original data. Minimum and maximum values will use the same number of decimal places as the original data. Proportions will be presented as two decimal places; values greater than zero but $<0.01$ will be presented as "< 0.01". Percentages will be reported to 2 decimal places; values greater than zero but $<0.01\%$ will be presented as "< 0.01%"; values greater than $99.99\%$ but less than $100\%$ will be reported as "> 99.99%". Estimated parameters, not on the same scale as raw observations (e.g. regression coefficients) will be reported to 3 significant figures.

### Missing data

As all samples for the test diagnostics get taken at the only study visit, we expect only marginal missing data. Any missing data that does arise we expect to be due to technical reasons unrelated to the outcome of interest. For this reason, the main analysis will be a complete-case analysis. For sensitivity analyses, we will, for each of the main objectives, conduct i) worst-case and ii) best-case scenario imputations and analyse the data with these imputations.

While we do not anticipate much missing data, should the missing data, for whatever reason, be more substantial than expected (say exceed 5% of the total data), we will use multiple imputation for the analysis. Specifically we will use fully conditional specification (FCS) as implemented in Multiple Imputation using Chained Equations (MICE, @vanBuurenGroothuisOudshoorn2011) and the `mice` package in R, with m=10 imputations at least. 

### Technical details

The R environment for statistical computing (v4.2.2 or later) will be used for all analyses.

All analysis code will be made publicly available under an MIT or GNU GPL v3.0 license on GitHub.


## Primary objective analyses

```{r primAnal}
dfResPrim<-data.frame(
  country=c(rep("Cameroon",4),rep("Nigeria",4),rep("Kenya",2),rep("Bangladesh",3),rep("Brazil",2),rep("Vietnam",3),rep("Malawi",1)),
  region=c(rep("",4+4+2+3),"Aracaju","Maceio",rep("",3+1)),
  setting=c("PHC","District","Informal settlements ACF","Children","PHC","District","Nomads","IDP / refugees","PHC","District","PHC","District","Informal settlements ACF","PHC","PHC","PHC","Informal settlements ACF","Children","PHC"),
  prevalenceTB=NA,
  posPropHiv=NA,
  sensHiv=NA,
  specHiv=NA,
  ppvHiv=NA,
  npvHiv=NA,
  posPropCrpPoc=NA,
  sensCrpPoc=NA,
  specCrpPoc=NA,
  ppvCrpPoc=NA,
  npvCrpPoc=NA,
  posPropCrpRdt=NA,
  sensCrpRdt=NA,
  specCrpRdt=NA,
  ppvCrpRdt=NA,
  npvCrpRdt=NA,
  posPropLamFuji=NA,
  sensLamFuji=NA,
  specLamFuji=NA,
  ppvLamFuji=NA,
  npvLamFuji=NA,
  # sensLamBiopromic=NA,
  # specLamBiopromic=NA,
  # ppvLamBiopromic=NA,
  # npvLamBiopromic=NA,
  posPropXpertPooled=NA,
  sensXpertPooled=NA,
  specXpertPooled=NA,
  ppvXpertPooled=NA,
  npvXpertPooled=NA,
  posPropCad=NA,
  sensCad=NA,
  specCad=NA,
  ppvCad=NA,
  npvCad=NA
  # sensCadMinxray=NA,
  # specCadMinxray=NA,
  # ppvCadMinxray=NA,
  # npvCadMinxray=NA
)

propEstCi<-function(n,k,d=1){
  est<-format(nsmall=d,round(digits=d,100*k/n))
  ci<-format(nsmall=d,round(digits=d,100*binom.test(x=k,n=n)$conf.int))
  res<-paste(sep="",est,"% (",ci[1],"%,",ci[2],"%)")
  return(res)
}

propEstBeta<-function(n,k){
  ci<-binom.test(x=k,n=n)$conf.int
  ab<-bootComb::getBetaFromCI(qLow=ci[1],qUpp=ci[2])$pars
  return(ab)
}

analysisFun<-function(dat,c,r,s){
  dat<-dat %>% dplyr::filter(country==c & region==r & setting==s)
  
  prevalenceTB=propEstCi(k=sum(dat$reference),n=nrow(dat))
  posPropHiv=propEstCi(k=sum(dat$crpPoc==1),n=nrow(dat))
  sensHiv=ifelse(sum(dat$reference==1)>0,propEstCi(k=sum(dat$reference==1 & dat$hiv==1),n=sum(dat$reference==1)),NA)
  specHiv=ifelse(sum(dat$reference==0)>0,propEstCi(k=sum(dat$reference==0 & dat$hiv==0),n=sum(dat$reference==0)),NA)
  ppvHiv=ifelse(sum(dat$hiv==1)>0,propEstCi(k=sum(dat$reference==1 & dat$hiv==1),n=sum(dat$hiv==1)),NA)
  npvHiv=ifelse(sum(dat$hiv==0)>0,propEstCi(k=sum(dat$reference==0 & dat$hiv==0),n=sum(dat$hiv==0)),NA)
  posPropCrpPoc=propEstCi(k=sum(dat$crpPoc==1),n=nrow(dat))
  sensCrpPoc=ifelse(sum(dat$reference==1)>0,propEstCi(k=sum(dat$reference==1 & dat$crpPoc==1),n=sum(dat$reference==1)),NA)
  specCrpPoc=ifelse(sum(dat$reference==0)>0,propEstCi(k=sum(dat$reference==0 & dat$crpPoc==0),n=sum(dat$reference==0)),NA)
  ppvCrpPoc=ifelse(sum(dat$crpPoc==1)>0,propEstCi(k=sum(dat$reference==1 & dat$crpPoc==1),n=sum(dat$crpPoc==1)),NA)
  npvCrpPoc=ifelse(sum(dat$crpPoc==0)>0,propEstCi(k=sum(dat$reference==0 & dat$crpPoc==0),n=sum(dat$crpPoc==0)),NA)
  posPropCrpRdt=propEstCi(k=sum(dat$crpRdt==1),n=nrow(dat))
  sensCrpRdt=ifelse(sum(dat$reference==1)>0,propEstCi(k=sum(dat$reference==1 & dat$crpRdt==1),n=sum(dat$reference==1)),NA)
  specCrpRdt=ifelse(sum(dat$reference==0)>0,propEstCi(k=sum(dat$reference==0 & dat$crpRdt==0),n=sum(dat$reference==0)),NA)
  ppvCrpRdt=ifelse(sum(dat$crpRdt==1)>0,propEstCi(k=sum(dat$reference==1 & dat$crpRdt==1),n=sum(dat$crpRdt==1)),NA)
  npvCrpRdt=ifelse(sum(dat$crpRdt==0)>0,propEstCi(k=sum(dat$reference==0 & dat$crpRdt==0),n=sum(dat$crpRdt==0)),NA)
  posPropLamFuji=propEstCi(k=sum(dat$lamFuji==1),n=nrow(dat))
  sensLamFuji=ifelse(sum(dat$reference==1)>0,propEstCi(k=sum(dat$reference==1 & dat$lamFuji==1),n=sum(dat$reference==1)),NA)
  specLamFuji=ifelse(sum(dat$reference==0)>0,propEstCi(k=sum(dat$reference==0 & dat$lamFuji==0),n=sum(dat$reference==0)),NA)
  ppvLamFuji=ifelse(sum(dat$lamFuji==1)>0,propEstCi(k=sum(dat$reference==1 & dat$lamFuji==1),n=sum(dat$lamFuji==1)),NA)
  npvLamFuji=ifelse(sum(dat$lamFuji==0)>0,propEstCi(k=sum(dat$reference==0 & dat$lamFuji==0),n=sum(dat$lamFuji==0)),NA)
  # sensLamBiopromic=ifelse(sum(dat$reference==1)>0,propEstCi(k=sum(dat$reference==1 & dat$lamBiopromic==1),n=sum(dat$reference==1)),NA)
  # specLamBiopromic=ifelse(sum(dat$reference==0)>0,propEstCi(k=sum(dat$reference==0 & dat$lamBiopromic==0),n=sum(dat$reference==0)),NA)
  # ppvLamBiopromic=ifelse(sum(dat$lamBiopromic==1)>0,propEstCi(k=sum(dat$reference==1 & dat$lamBiopromic==1),n=sum(dat$lamBiopromic==1)),NA)
  # npvLamBiopromic=ifelse(sum(dat$lamBiopromic==0)>0,propEstCi(k=sum(dat$reference==0 & dat$lamBiopromic==0),n=sum(dat$lamBiopromic==0)),NA)
  posPropXpertPooled=propEstCi(k=sum(dat$xpertPooled==1),n=nrow(dat))
  sensXpertPooled=ifelse(sum(dat$reference==1)>0,propEstCi(k=sum(dat$reference==1 & dat$xpertPooled==1),n=sum(dat$reference==1)),NA)
  specXpertPooled=ifelse(sum(dat$reference==0)>0,propEstCi(k=sum(dat$reference==0 & dat$xpertPooled==0),n=sum(dat$reference==0)),NA)
  ppvXpertPooled=ifelse(sum(dat$xpertPooled==1)>0,propEstCi(k=sum(dat$reference==1 & dat$xpertPooled==1),n=sum(dat$xpertPooled==1)),NA)
  npvXpertPooled=ifelse(sum(dat$xpertPooled==0)>0,propEstCi(k=sum(dat$reference==0 & dat$xpertPooled==0),n=sum(dat$xpertPooled==0)),NA)
  posPropCad=propEstCi(k=sum(dat$cad==1),n=nrow(dat))
  sensCad=ifelse(sum(dat$reference==1)>0,propEstCi(k=sum(dat$reference==1 & dat$cad==1),n=sum(dat$reference==1)),NA)
  specCad=ifelse(sum(dat$reference==0)>0,propEstCi(k=sum(dat$reference==0 & dat$cad==0),n=sum(dat$reference==0)),NA)
  ppvCad=ifelse(sum(dat$cad==1)>0,propEstCi(k=sum(dat$reference==1 & dat$cad==1),n=sum(dat$cad==1)),NA)
  npvCad=ifelse(sum(dat$cad==0)>0,propEstCi(k=sum(dat$reference==0 & dat$cad==0),n=sum(dat$cad==0)),NA)
  # sensCadMinxray=ifelse(sum(dat$reference==1)>0,propEstCi(k=sum(dat$reference==1 & dat$cadMinxray==1),n=sum(dat$reference==1)),NA)
  # specCadMinxray=ifelse(sum(dat$reference==0)>0,propEstCi(k=sum(dat$reference==0 & dat$cadMinxray==0),n=sum(dat$reference==0)),NA)
  # ppvCadMinxray=ifelse(sum(dat$cadMinxray==1)>0,propEstCi(k=sum(dat$reference==1 & dat$cadMinxray==1),n=sum(dat$cadMinxray==1)),NA)
  # npvCadMinxray=ifelse(sum(dat$cadMinxray==0)>0,propEstCi(k=sum(dat$reference==0 & dat$cadMinxray==0),n=sum(dat$cadMinxray==0)),NA)
  
  return(c(prevalenceTB,posPropHiv,sensHiv,specHiv,ppvHiv,npvHiv,posPropCrpPoc,sensCrpPoc,specCrpPoc,ppvCrpPoc,npvCrpPoc,posPropCrpRdt,sensCrpRdt,specCrpRdt,ppvCrpRdt,npvCrpRdt,posPropLamFuji,sensLamFuji,specLamFuji,ppvLamFuji,npvLamFuji,posPropXpertPooled,sensXpertPooled,specXpertPooled,ppvXpertPooled,npvXpertPooled,posPropCad,sensCad,specCad,ppvCad,npvCad))
}

for(i in 1:nrow(dfResPrim)){
  dfResPrim[i,-(1:3)]<-analysisFun(dat=dfSim,c=dfResPrim$country[i],r=dfResPrim$region[i],s=dfResPrim$setting[i])
}

dfResPrimPosProp<-dfResPrim %>% dplyr::select(country,region,setting,prevalenceTB,posPropHiv,posPropCrpPoc,posPropCrpRdt,posPropLamFuji,posPropXpertPooled,posPropCad)
dfResPrimSensSpec<-dfResPrim %>% dplyr::select(country,region,setting,prevalenceTB,sensHiv,specHiv,sensCrpPoc,specCrpPoc,sensCrpRdt,specCrpRdt,sensLamFuji,specLamFuji,sensXpertPooled,specXpertPooled,sensCad,specCad)
dfResPrimPpvNpv<-dfResPrim %>% dplyr::select(country,region,setting,prevalenceTB,ppvHiv,npvHiv,ppvCrpPoc,npvCrpPoc,ppvCrpRdt,npvCrpRdt,ppvLamFuji,npvLamFuji,ppvXpertPooled,npvXpertPooled,ppvCad,npvCad)

analysisFunBetaPars<-function(dat,c,r,s){
  dat<-dat %>% dplyr::filter(country==c & region==r & setting==s)
  
  prevalenceTB=propEstBeta(k=sum(dat$reference),n=nrow(dat))
  posPropHiv=propEstBeta(k=sum(dat$hiv==1),n=nrow(dat))
  if(sum(dat$reference==1)>0){sensHiv=propEstBeta(k=sum(dat$reference==1 & dat$hiv==1),n=sum(dat$reference==1))}else{sensHiv=rep(NA,2)}
  if(sum(dat$reference==1)>0){specHiv=propEstBeta(k=sum(dat$reference==0 & dat$hiv==0),n=sum(dat$reference==0))}else{specHiv=rep(NA,2)}
  if(sum(dat$hiv==1)>0){ppvHiv=propEstBeta(k=sum(dat$reference==1 & dat$hiv==1),n=sum(dat$hiv==1))}else{ppvHiv=rep(NA,2)}
  if(sum(dat$hiv==0)>0){npvHiv=propEstBeta(k=sum(dat$reference==0 & dat$hiv==0),n=sum(dat$hiv==0))}else{npvHiv=rep(NA,2)}
  posPropCrpPoc=propEstBeta(k=sum(dat$crpPoc==1),n=nrow(dat))
  if(sum(dat$reference==1)>0){sensCrpPoc=propEstBeta(k=sum(dat$reference==1 & dat$crpPoc==1),n=sum(dat$reference==1))}else{sensCrpPoc=rep(NA,2)}
  if(sum(dat$reference==1)>0){specCrpPoc=propEstBeta(k=sum(dat$reference==0 & dat$crpPoc==0),n=sum(dat$reference==0))}else{specCrpPoc=rep(NA,2)}
  if(sum(dat$crpPoc==1)>0){ppvCrpPoc=propEstBeta(k=sum(dat$reference==1 & dat$crpPoc==1),n=sum(dat$crpPoc==1))}else{ppvCrpPoc=rep(NA,2)}
  if(sum(dat$crpPoc==0)>0){npvCrpPoc=propEstBeta(k=sum(dat$reference==0 & dat$crpPoc==0),n=sum(dat$crpPoc==0))}else{npvCrpPoc=rep(NA,2)}
  posPropCrpRdt=propEstBeta(k=sum(dat$crpRdt==1),n=nrow(dat))
  if(sum(dat$reference==1)>0){sensCrpRdt=propEstBeta(k=sum(dat$reference==1 & dat$crpRdt==1),n=sum(dat$reference==1))}else{sensCrpRdt=rep(NA,2)}
  if(sum(dat$reference==1)>0){specCrpRdt=propEstBeta(k=sum(dat$reference==0 & dat$crpRdt==0),n=sum(dat$reference==0))}else{specCrpRdt=rep(NA,2)}
  if(sum(dat$crpRdt==1)>0){ppvCrpRdt=propEstBeta(k=sum(dat$reference==1 & dat$crpRdt==1),n=sum(dat$crpRdt==1))}else{ppvCrpRdt=rep(NA,2)}
  if(sum(dat$crpRdt==0)>0){npvCrpRdt=propEstBeta(k=sum(dat$reference==0 & dat$crpRdt==0),n=sum(dat$crpRdt==0))}else{npvCrpRdt=rep(NA,2)}
  posPropLamFuji=propEstBeta(k=sum(dat$lamFuji==1),n=nrow(dat))
  if(sum(dat$reference==1)>0){sensLamFuji=propEstBeta(k=sum(dat$reference==1 & dat$lamFuji==1),n=sum(dat$reference==1))}else{sensLamFuji=rep(NA,2)}
  if(sum(dat$reference==1)>0){specLamFuji=propEstBeta(k=sum(dat$reference==0 & dat$lamFuji==0),n=sum(dat$reference==0))}else{specLamFuji=rep(NA,2)}
  if(sum(dat$lamFuji==1)>0){ppvLamFuji=propEstBeta(k=sum(dat$reference==1 & dat$lamFuji==1),n=sum(dat$lamFuji==1))}else{ppvLamFuji=rep(NA,2)}
  if(sum(dat$lamFuji==0)>0){npvLamFuji=propEstBeta(k=sum(dat$reference==0 & dat$lamFuji==0),n=sum(dat$lamFuji==0))}else{npvLamFuji=rep(NA,2)}
  posPropXpertPooled=propEstBeta(k=sum(dat$xpertPooled==1),n=nrow(dat))
  if(sum(dat$reference==1)>0){sensXpertPooled=propEstBeta(k=sum(dat$reference==1 & dat$xpertPooled==1),n=sum(dat$reference==1))}else{sensXpertPooled=rep(NA,2)}
  if(sum(dat$reference==1)>0){specXpertPooled=propEstBeta(k=sum(dat$reference==0 & dat$xpertPooled==0),n=sum(dat$reference==0))}else{specXpertPooled=rep(NA,2)}
  if(sum(dat$xpertPooled==1)>0){ppvXpertPooled=propEstBeta(k=sum(dat$reference==1 & dat$xpertPooled==1),n=sum(dat$xpertPooled==1))}else{ppvXpertPooled=rep(NA,2)}
  if(sum(dat$xpertPooled==0)>0){npvXpertPooled=propEstBeta(k=sum(dat$reference==0 & dat$xpertPooled==0),n=sum(dat$xpertPooled==0))}else{npvXpertPooled=rep(NA,2)}
  posPropCad=propEstBeta(k=sum(dat$cad==1),n=nrow(dat))
  if(sum(dat$reference==1)>0){sensCad=propEstBeta(k=sum(dat$reference==1 & dat$cad==1),n=sum(dat$reference==1))}else{sensCad=rep(NA,2)}
  if(sum(dat$reference==1)>0){specCad=propEstBeta(k=sum(dat$reference==0 & dat$cad==0),n=sum(dat$reference==0))}else{specCad=rep(NA,2)}
  if(sum(dat$cad==1)>0){ppvCad=propEstBeta(k=sum(dat$reference==1 & dat$cad==1),n=sum(dat$cad==1))}else{ppvCad=rep(NA,2)}
  if(sum(dat$cad==0)>0){npvCad=propEstBeta(k=sum(dat$reference==0 & dat$cad==0),n=sum(dat$cad==0))}else{npvCad=rep(NA,2)}

  return(c(prevalenceTB,posPropHiv,sensHiv,specHiv,ppvHiv,npvHiv,posPropCrpPoc,sensCrpPoc,specCrpPoc,ppvCrpPoc,npvCrpPoc,posPropCrpRdt,sensCrpRdt,specCrpRdt,ppvCrpRdt,npvCrpRdt,posPropLamFuji,sensLamFuji,specLamFuji,ppvLamFuji,npvLamFuji,posPropXpertPooled,sensXpertPooled,specXpertPooled,ppvXpertPooled,npvXpertPooled,posPropCad,sensCad,specCad,ppvCad,npvCad))
}

dfResPrimBeta<-data.frame(
  country=c(rep("Cameroon",4),rep("Nigeria",4),rep("Kenya",2),rep("Bangladesh",3),rep("Brazil",2),rep("Vietnam",3),rep("Malawi",1)),
  region=c(rep("",4+4+2+3),"Aracaju","Maceio",rep("",3+1)),
  setting=c("PHC","District","Informal settlements ACF","Children","PHC","District","Nomads","IDP / refugees","PHC","District","PHC","District","Informal settlements ACF","PHC","PHC","PHC","Informal settlements ACF","Children","PHC"),
  prevalenceTB_a=NA,
  prevalenceTB_b=NA,
  posPropHiv_a=NA,
  posPropHiv_b=NA,
  sensHiv_a=NA,
  sensHiv_b=NA,
  specHiv_a=NA,
  specHiv_b=NA,
  ppvHiv_a=NA,
  ppvHiv_b=NA,
  npvHiv_a=NA,
  npvHiv_b=NA,
  posPropCrpPoc_a=NA,
  posPropCrpPoc_b=NA,
  sensCrpPoc_a=NA,
  sensCrpPoc_b=NA,
  specCrpPoc_a=NA,
  specCrpPoc_b=NA,
  ppvCrpPoc_a=NA,
  ppvCrpPoc_b=NA,
  npvCrpPoc_a=NA,
  npvCrpPoc_b=NA,
  posPropCrpRdt_a=NA,
  posPropCrpRdt_b=NA,
  sensCrpRdt_a=NA,
  sensCrpRdt_b=NA,
  specCrpRdt_a=NA,
  specCrpRdt_b=NA,
  ppvCrpRdt_a=NA,
  ppvCrpRdt_b=NA,
  npvCrpRdt_a=NA,
  npvCrpRdt_b=NA,
  posPropLamFuji_a=NA,
  posPropLamFuji_b=NA,
  sensLamFuji_a=NA,
  sensLamFuji_b=NA,
  specLamFuji_a=NA,
  specLamFuji_b=NA,
  ppvLamFuji_a=NA,
  ppvLamFuji_b=NA,
  npvLamFuji_a=NA,
  npvLamFuji_b=NA,
  posPropXpertPooled_a=NA,
  posPropXpertPooled_b=NA,
  sensXpertPooled_a=NA,
  sensXpertPooled_b=NA,
  specXpertPooled_a=NA,
  specXpertPooled_b=NA,
  ppvXpertPooled_a=NA,
  ppvXpertPooled_b=NA,
  npvXpertPooled_a=NA,
  npvXpertPooled_b=NA,
  posPropCad_a=NA,
  posPropCad_b=NA,
  sensCad_a=NA,
  sensCad_b=NA,
  specCad_a=NA,
  specCad_b=NA,
  ppvCad_a=NA,
  ppvCad_b=NA,
  npvCad_a=NA,
  npvCad_b=NA
)

for(i in 1:nrow(dfResPrimBeta)){
  dfResPrimBeta[i,-(1:3)]<-analysisFunBetaPars(dat=dfSim,c=dfResPrim$country[i],r=dfResPrim$region[i],s=dfResPrim$setting[i])
}
```

### Sensitivities and specificities for each test

For every diagnostic assay, we will compute and report the sensitivity, specificity together with exact binomial 95% confidence intervals by country and setting (@tbl-primAnalSensSpec).

```{r primAnalSensSpec}
#| label: tbl-primAnalSensSpec
#| tbl-cap: "Sensitivities and specificities of the evaluated tests."

dfResPrimSensSpec %>%
  dplyr::select(!country) %>%
  kable(row.names=F,col.name=c("Region","Setting","TB prevalence",rep(c("Sensitivity","Specificity"),6)),caption="Numbers in brackets indicate exact binomial 95% confidence intervals.") %>%
  kable_styling(full_width=FALSE) %>%
  add_header_above(header=c(" "=3,"HIV"=2,"POC CRP"=2,"RDT CRP"=2,"Fuji LAM"=2,"Pooled Xpert"=2,"Digital chest X-ray + CAD"=2)) %>%
  pack_rows("Cameroon",1,4) %>%
  pack_rows("Nigeria",5,8) %>%
  pack_rows("Kenya",9,10) %>%
  pack_rows("Bangladesh",11,13) %>%
  pack_rows("Brazil",14,15) %>%
  pack_rows("Vietnam",16,18) %>%
  pack_rows("Malawi",19,19)
```

### Predictive values for each test

We will also report positive predictive and negative predictive values, also with exact binomial 95% confidence intervals (@tbl-primAnalPpvNpv).

```{r primAnalPpvNpv}
#| label: tbl-primAnalPpvNpv
#| tbl-cap: "Positive and negative predictive values for the evaluated tests."

dfResPrimPpvNpv %>%
  dplyr::select(!country) %>%
  kable(row.names=F,col.name=c("Region","Setting","TB prevalence",rep(c("PPV","NPV"),6)),caption="Numbers in brackets indicate exact binomial 95% confidence intervals.") %>%
  kable_styling(full_width=FALSE) %>%
  add_header_above(header=c(" "=3,"HIV"=2,"POC CRP"=2,"RDT CRP"=2,"Fuji LAM"=2,"Pooled Xpert"=2,"Digital chest X-ray + CAD"=2)) %>%
  pack_rows("Cameroon",1,4) %>%
  pack_rows("Nigeria",5,8) %>%
  pack_rows("Kenya",9,10) %>%
  pack_rows("Bangladesh",11,13) %>%
  pack_rows("Brazil",14,15) %>%
  pack_rows("Vietnam",16,18) %>%
  pack_rows("Malawi",19,19)
```

### Proportions of positive test results

We will also compute the proportions of tests yielding positive (resp. negative) results for each test in each setting.

```{r primAnalPosProp}
#| label: tbl-primAnalPosProp
#| tbl-cap: "Proportions of positive test results for the evaluated tests."

dfResPrimPosProp %>%
  dplyr::select(!country) %>%
  kable(row.names=F,col.name=c("Region","Setting","TB prevalence","HIV","POC CRP","RDT CRP","Fuji LAM","Pooled Xpert","Digital chest X-ray + CAD"),caption="Numbers in brackets indicate exact binomial 95% confidence intervals.") %>%
  kable_styling(full_width=FALSE) %>%
  pack_rows("Cameroon",1,4) %>%
  pack_rows("Nigeria",5,8) %>%
  pack_rows("Kenya",9,10) %>%
  pack_rows("Bangladesh",11,13) %>%
  pack_rows("Brazil",14,15) %>%
  pack_rows("Vietnam",16,18) %>%
  pack_rows("Malawi",19,19)
```

### Screening algorithms / diagnostic combinations

As done above for each test separately, we will evaluate sensitivity, specificity, positive and negative predictive values and proportions of positive test results for each of the screening algorithms listed below. Each of these algorithms ends up with a binary classification of presumed TB or not presumed TB.

Below are the specific algorithms we will evaluate:

* XX
* YY
* ZZ
* WW


**Jan15 discussion:** agree on pre-specified algorithms to evaluate.

#### Conditional probability parameters

As an alternative we could systematically evaluate every possible sequential combination of tests; i.e. we would evaluate sensitivities, specificities, predictive values and proportion of positive results conditionally on any combination of prior test results from any number of the other tests (maximum of 4 prior tests given 5 screening tests in total, assuming the HIV test always gets done).

With 5 tests, there will be 18 possible combinations of prior tests (1 if no prior tests are done, 4 if there is just one prior test, 6 if there are 2 prior tests, 4 if there are 3 prior test and 1 if there are 4 prior tests) with each test yielding a positive or a negative result, meaning there are $1+4\cdot2^1+6\cdot2^2+4\cdot2^3+1\cdot2^4=81$ sets of sensitivities, specificities, PPVs, NPVs and proportions of positive test results for **each** of the 5 tests (405 total sets).

We will do this separately for each of the 19 settings from @tbl-sampSizeTableByCountry (1,995 total sets).

This can be summarised in large matrices of tabulations. We will compute them, but not include corresponding mock-ups in this SAP given how many and how large these matrices will be. They will be formatted to be easily machine-readable as their main use is for input into the health economic model.

**Jan15 discussion:** pre-specified algorithms or all 405 sets of results for each setting?

**Jan15 discussion:** are algorithms simple combinations (meaning we just directly evaluate the end result) or sequential (meaning we need results for each step along the algorithm)?


### Link-up with the health economic analysis

#### Beta distributions for parameters

All of the above are probability parameters and they will directly inform the decision tree model used in the planned health economic analysis.

To allow propagating the uncertainty of each of the above estimates, we will use quantile matching to identify best-fit beta distributions from the 95% confidence intervals for each parameter. The parameters defining each beta distribution will be provided as input parameters for the health economic analysis, which will sample from these beta distributions to capture the uncertainty associated with each of our estimates.

Recall that a random variable $X$ follows a beta distribution with parameters $a,b$, $X\sim\beta(a,b)$, if

$$
p(x)=\begin{cases}
\frac{x^{\alpha-1}(1-x)^{b-1}}{B(a,b)}     &\mbox{ if }x\in[0,1] \\
0             &\mbox{ otherwise}
\end{cases}
$$

where $B(a,b)=\frac{\Gamma(a)\Gamma(b)}{\Gamma(a+b)}$.

The mean of this distribution is given by $E(X)=\frac{a}{a+b}$ and the variance is $Var(X)=\frac{a\cdot b}{(a+b)^2(a+b+1)}$.

So we will estimate the values for $a,b$ for the best-fit distribution for the confidence interval we estimated for each of the probability parameters (proportion of positive tests, sensitivity, specificity, positive and negative predictive values). To illustrate this computation, @tbl-primAnalBeta shows the matrix of the estimated $a,b$ values, obtained for the unconditional probability parameters.

```{r primAnalBeta}
#| label: tbl-primAnalBeta
#| tbl-cap: "Best-fit beta distribution parameters for the unconditional probability parameters."

dfResPrimBeta %>%
  dplyr::select(!country) %>%
  kable(row.names=FALSE,col.names=c("Region","Setting",rep(c("a","b"),31)),digits=4) %>%
  kable_styling(full_width=FALSE) %>%
  add_header_above(c(" "=2,"Prevalence of TB"=2,rep(c("Proportion of positive tests"=2,"Sensitivity"=2,"Specificity"=2,"PPV"=2,"NPV"=2),6))) %>%
  add_header_above(c(" "=4,"HIV"=10,"CRP POC"=10,"CRP RDT"=10,"Fuji LAM"=10,"Pooled Xpert"=10,"Digital chest X-ray + CAD"=10)) %>%
  pack_rows("Cameroon",1,4) %>%
  pack_rows("Nigeria",5,8) %>%
  pack_rows("Kenya",9,10) %>%
  pack_rows("Bangladesh",11,13) %>%
  pack_rows("Brazil",14,15) %>%
  pack_rows("Vietnam",16,18) %>%
  pack_rows("Malawi",19,19)
```


#### Example of one screening algorithm

For this example, we follow the example from the protocol which is also discussed in the health economic analysis plan:

CAD CXR followed (if positive result) by CRP + LAM + HIV tests, followed (if any of CRP, LAM or HIV is positive) by single Xpert.

![The example algorithm (adpated from the study protocol) evaluated in this SAP using simulated data to illustrate how algorithms will be evaluated.](exampleAlgorithm.png)


```{r}
analysisFunBetaParsAlgo<-function(dat,c,r,s){
  dat<-dat %>% dplyr::filter(country==c & region==r & setting==s)
  
  prevalenceTB=propEstBeta(k=sum(dat$reference),n=nrow(dat))
  posPropHiv=propEstBeta(k=sum(dat$hiv==1),n=nrow(dat))
  
  included<-rep(TRUE,nrow(dat))
  posRes<-included & (dat$cad==1)
  posPropCad=propEstBeta(k=sum(posRes),n=sum(included))
  if(sum(posRes)>0){ppvCad=propEstBeta(k=sum(dat$reference==1 & posRes),n=sum(posRes))}else{ppvCad=rep(NA,2)}
  if(sum(!posRes)>0){npvCad=propEstBeta(k=sum(dat$reference==0 & !posRes),n=sum(!posRes))}else{npvCad=rep(NA,2)}
  
  included<-(dat$cad==1)
  posRes<-included & (dat$lamFuji==1 | dat$crpPoc==1 | dat$hiv==1)
  posPropLamCrpHiv=propEstBeta(k=sum(posRes),n=sum(included))
  if(sum(posRes)>0){ppvLamCrpHiv=propEstBeta(k=sum(dat$reference==1 & posRes),n=sum(posRes))}else{ppvLamCrpHiv=rep(NA,2)}
  if(sum(!posRes)>0){npvLamCrpHiv=propEstBeta(k=sum(dat$reference==0 & !posRes),n=sum(!posRes))}else{npvLamCrpHiv=rep(NA,2)}
  
  included<-(dat$cad==1 & (dat$lamFuji==1 | dat$crpPoc==1 | dat$hiv==1))
  posRes<-included & (dat$xpert==1)
  posPropXpert=propEstBeta(k=sum(posRes),n=sum(included))
  if(sum(posRes)>0){ppvXpert=propEstBeta(k=sum(dat$reference==1 & posRes),n=sum(posRes))}else{ppvXpert=rep(NA,2)}
  if(sum(!posRes)>0){npvXpert=propEstBeta(k=sum(dat$reference==0 & !posRes),n=sum(!posRes))}else{npvXpert=rep(NA,2)}
  
  included<-rep(TRUE,nrow(dat))
  posRes<-included & (dat$cad==1 & (dat$lamFuji==1 | dat$crpPoc==1 | dat$hiv==1) & dat$xpert==1)
  posPropOverall=propEstBeta(k=sum(posRes),n=sum(included))
  if(sum(posRes)>0){ppvOverall=propEstBeta(k=sum(dat$reference==1 & posRes),n=sum(posRes))}else{ppvOverall=rep(NA,2)}
  if(sum(!posRes)>0){npvOverall=propEstBeta(k=sum(dat$reference==0 & !posRes),n=sum(!posRes))}else{npvOverall=rep(NA,2)}
  if(sum(dat$reference==1)>0){sensOverall=propEstBeta(k=sum(dat$reference==1 & posRes),n=sum(dat$reference==1))}else{sensOverall=rep(NA,2)}
  if(sum(dat$reference==1)>0){specOverall=propEstBeta(k=sum(dat$reference==0 & !posRes),n=sum(dat$reference==0))}else{specOverall=rep(NA,2)}

  return(c(prevalenceTB,posPropCad,ppvCad,npvCad,posPropLamCrpHiv,ppvLamCrpHiv,npvLamCrpHiv,posPropXpert,ppvXpert,npvXpert,posPropOverall,ppvOverall,npvOverall,sensOverall,specOverall))
}

dfResPrimBetaAlgo<-data.frame(
  country=c(rep("Cameroon",4),rep("Nigeria",4),rep("Kenya",2),rep("Bangladesh",3),rep("Brazil",2),rep("Vietnam",3),rep("Malawi",1)),
  region=c(rep("",4+4+2+3),"Aracaju","Maceio",rep("",3+1)),
  setting=c("PHC","District","Informal settlements ACF","Children","PHC","District","Nomads","IDP / refugees","PHC","District","PHC","District","Informal settlements ACF","PHC","PHC","PHC","Informal settlements ACF","Children","PHC"),
  
  prevalenceTB_a=NA,
  prevalenceTB_b=NA,
  
  posPropCad_a=NA,
  posPropCad_b=NA,
  ppvCad_a=NA,
  ppvCad_b=NA,
  npvCad_a=NA,
  npvCad_b=NA,
  
  posPropLamCrpHiv_a=NA,
  posPropLamCrpHiv_b=NA,
  ppvLamCrpHiv_a=NA,
  ppvLamCrpHiv_b=NA,
  npvLamCrpHiv_a=NA,
  npvLamCrpHiv_b=NA,
  
  posPropXpert_a=NA,
  posPropXpert_b=NA,
  ppvXpert_a=NA,
  ppvXpert_b=NA,
  npvXpert_a=NA,
  npvXpert_b=NA,
  
  posPropOverall_a=NA,
  posPropOverall_b=NA,
  ppvOverall_a=NA,
  ppvOverall_b=NA,
  npvOverall_a=NA,
  npvOverall_b=NA,
  sensOverall_a=NA,
  sensOverall_b=NA,
  specOverall_a=NA,
  specOverall_b=NA
)

for(i in 1:nrow(dfResPrimBeta)){
  dfResPrimBetaAlgo[i,-(1:3)]<-analysisFunBetaParsAlgo(dat=dfSim,c=dfResPrim$country[i],r=dfResPrim$region[i],s=dfResPrim$setting[i])
}
```

We only report positive proportions, PPV, NPV for each stage, but also report overall TB prevalence according to the reference test, as well as positive proportion, PPV, NPV, sensitivity and specificity for the full algorithm; see @tbl-primAnalAlgo.

```{r primAnalAlgo}
#| label: tbl-primAnalAlgo
#| tbl-cap: "Results for an example screening algorithm. We only report the the beta distribution parameters for each estimated probability parameter."

dfResPrimBetaAlgo %>%
  dplyr::select(!country) %>%
  kable(row.names=F,col.name=c("Region","Setting",rep(c("a","b"),15)),caption="Numbers in brackets indicate exact binomial 95% confidence intervals.") %>%
  kable_styling(full_width=FALSE) %>%
  add_header_above(c(" "=2,"Prevalence of TB"=2,rep(c("Proportion of positive tests"=2,"PPV"=2,"NPV"=2),3),c("Proportion of positive tests"=2,"PPV"=2,"NPV"=2,"Sensitivity"=2,"Specificity"=2))) %>%
  add_header_above(c(" "=4,"CAD CXR"=6,"LAM + CRP POC + HIV"=6,"Xpert single"=6,"Overall"=10)) %>%
  pack_rows("Cameroon",1,4) %>%
  pack_rows("Nigeria",5,8) %>%
  pack_rows("Kenya",9,10) %>%
  pack_rows("Bangladesh",11,13) %>%
  pack_rows("Brazil",14,15) %>%
  pack_rows("Vietnam",16,18) %>%
  pack_rows("Malawi",19,19)

dir.create("Output",showWarnings=FALSE)
write.csv(dfResPrimBetaAlgo,row.names=F,file=paste(sep="","Output/S4A_exampleAlgorithm_betaDistributionParameterEstimates_",gsub(pattern="-",replacement="",Sys.Date()),".csv"))
```


#### Bayesian analysis

**Jan15 discussion:** We could also directly estimate all of the probability parameters using Bayesian statistics - we would then directly get estimates of these beta distributions (rather than getting a frequentist point estimate with a CI, then quantile match to identify a beta distribution summarising the CI...). Using a beta $p\sim\beta(a,b)$ prior distribution and a binomial / Bernoulli likelihood $X~Bin(n,p)$, where X is the number of positive results, the posterior will also be a beta distribution (since the beta is the onjugate prior for a binomial likelihood) with a closed form solution: $p|X=k\sim\beta(k+a,n-k+b)$. The closed-form solution means this is computationally extremely fast to compute. For prior, a weakly informative prior will be used, specifically the Kerman prior $\beta(1/3,1/3)$ [@kerman2011].

```{r}
propEstBetaBayes<-function(n,k,prior_a=1/3,prior_b=1/3){
  ab<-c(k+prior_a,n-k+prior_b)
  if(n>0 & (k+prior_a)>=1 & (n-k+prior_b)>=1){
    map<-(k+prior_a-1)/(n+prior_a+prior_b-2)
    ci<-HDInterval::hdi(rbeta(1e6,shape1=ab[1],shape2=ab[2]))
  }else if(n>0 & (k+prior_a)<1 & (n-k+prior_b)>=1){
    map<-0
    ci<-HDInterval::hdi(rbeta(1e6,shape1=ab[1],shape2=ab[2]))
  }else if (n>0 & (k+prior_a)>=1 & (n-k+prior_b)<1){
    map<-1
    ci<-HDInterval::hdi(rbeta(1e6,shape1=ab[1],shape2=ab[2]))
  }else if(k==0 & n==0){
    map<-NA
    ci<-NA
  }
  
  return(list(parameters=ab,estimate=map,ci=ci))
}

analysisFunBayesBetaPars<-function(dat,c,r,s){
  dat<-dat %>% dplyr::filter(country==c & region==r & setting==s)
  
  prevalenceTB=propEstBetaBayes(k=sum(dat$reference),n=nrow(dat))$parameters
  posPropHiv=propEstBetaBayes(k=sum(dat$hiv==1),n=nrow(dat))$parameters
  if(sum(dat$reference==1)>0){sensHiv=propEstBetaBayes(k=sum(dat$reference==1 & dat$hiv==1),n=sum(dat$reference==1))$parameters}else{sensHiv=rep(NA,2)}
  if(sum(dat$reference==1)>0){specHiv=propEstBetaBayes(k=sum(dat$reference==0 & dat$hiv==0),n=sum(dat$reference==0))$parameters}else{specHiv=rep(NA,2)}
  if(sum(dat$hiv==1)>0){ppvHiv=propEstBetaBayes(k=sum(dat$reference==1 & dat$hiv==1),n=sum(dat$hiv==1))$parameters}else{ppvHiv=rep(NA,2)}
  if(sum(dat$hiv==0)>0){npvHiv=propEstBetaBayes(k=sum(dat$reference==0 & dat$hiv==0),n=sum(dat$hiv==0))$parameters}else{npvHiv=rep(NA,2)}
  posPropCrpPoc=propEstBetaBayes(k=sum(dat$crpPoc==1),n=nrow(dat))
  if(sum(dat$reference==1)>0){sensCrpPoc=propEstBetaBayes(k=sum(dat$reference==1 & dat$crpPoc==1),n=sum(dat$reference==1))$parameters}else{sensCrpPoc=rep(NA,2)}
  if(sum(dat$reference==1)>0){specCrpPoc=propEstBetaBayes(k=sum(dat$reference==0 & dat$crpPoc==0),n=sum(dat$reference==0))$parameters}else{specCrpPoc=rep(NA,2)}
  if(sum(dat$crpPoc==1)>0){ppvCrpPoc=propEstBetaBayes(k=sum(dat$reference==1 & dat$crpPoc==1),n=sum(dat$crpPoc==1))$parameters}else{ppvCrpPoc=rep(NA,2)}
  if(sum(dat$crpPoc==0)>0){npvCrpPoc=propEstBetaBayes(k=sum(dat$reference==0 & dat$crpPoc==0),n=sum(dat$crpPoc==0))$parameters}else{npvCrpPoc=rep(NA,2)}
  posPropCrpRdt=propEstBetaBayes(k=sum(dat$crpRdt==1),n=nrow(dat))
  if(sum(dat$reference==1)>0){sensCrpRdt=propEstBetaBayes(k=sum(dat$reference==1 & dat$crpRdt==1),n=sum(dat$reference==1))$parameters}else{sensCrpRdt=rep(NA,2)}
  if(sum(dat$reference==1)>0){specCrpRdt=propEstBetaBayes(k=sum(dat$reference==0 & dat$crpRdt==0),n=sum(dat$reference==0))$parameters}else{specCrpRdt=rep(NA,2)}
  if(sum(dat$crpRdt==1)>0){ppvCrpRdt=propEstBetaBayes(k=sum(dat$reference==1 & dat$crpRdt==1),n=sum(dat$crpRdt==1))$parameters}else{ppvCrpRdt=rep(NA,2)}
  if(sum(dat$crpRdt==0)>0){npvCrpRdt=propEstBetaBayes(k=sum(dat$reference==0 & dat$crpRdt==0),n=sum(dat$crpRdt==0))$parameters}else{npvCrpRdt=rep(NA,2)}
  posPropLamFuji=propEstBetaBayes(k=sum(dat$lamFuji==1),n=nrow(dat))
  if(sum(dat$reference==1)>0){sensLamFuji=propEstBetaBayes(k=sum(dat$reference==1 & dat$lamFuji==1),n=sum(dat$reference==1))$parameters}else{sensLamFuji=rep(NA,2)}
  if(sum(dat$reference==1)>0){specLamFuji=propEstBetaBayes(k=sum(dat$reference==0 & dat$lamFuji==0),n=sum(dat$reference==0))$parameters}else{specLamFuji=rep(NA,2)}
  if(sum(dat$lamFuji==1)>0){ppvLamFuji=propEstBetaBayes(k=sum(dat$reference==1 & dat$lamFuji==1),n=sum(dat$lamFuji==1))$parameters}else{ppvLamFuji=rep(NA,2)}
  if(sum(dat$lamFuji==0)>0){npvLamFuji=propEstBetaBayes(k=sum(dat$reference==0 & dat$lamFuji==0),n=sum(dat$lamFuji==0))$parameters}else{npvLamFuji=rep(NA,2)}
  posPropXpertPooled=propEstBetaBayes(k=sum(dat$xpertPooled==1),n=nrow(dat))
  if(sum(dat$reference==1)>0){sensXpertPooled=propEstBetaBayes(k=sum(dat$reference==1 & dat$xpertPooled==1),n=sum(dat$reference==1))$parameters}else{sensXpertPooled=rep(NA,2)}
  if(sum(dat$reference==1)>0){specXpertPooled=propEstBetaBayes(k=sum(dat$reference==0 & dat$xpertPooled==0),n=sum(dat$reference==0))$parameters}else{specXpertPooled=rep(NA,2)}
  if(sum(dat$xpertPooled==1)>0){ppvXpertPooled=propEstBetaBayes(k=sum(dat$reference==1 & dat$xpertPooled==1),n=sum(dat$xpertPooled==1))$parameters}else{ppvXpertPooled=rep(NA,2)}
  if(sum(dat$xpertPooled==0)>0){npvXpertPooled=propEstBetaBayes(k=sum(dat$reference==0 & dat$xpertPooled==0),n=sum(dat$xpertPooled==0))$parameters}else{npvXpertPooled=rep(NA,2)}
  posPropCad=propEstBetaBayes(k=sum(dat$cad==1),n=nrow(dat))
  if(sum(dat$reference==1)>0){sensCad=propEstBetaBayes(k=sum(dat$reference==1 & dat$cad==1),n=sum(dat$reference==1))$parameters}else{sensCad=rep(NA,2)}
  if(sum(dat$reference==1)>0){specCad=propEstBetaBayes(k=sum(dat$reference==0 & dat$cad==0),n=sum(dat$reference==0))$parameters}else{specCad=rep(NA,2)}
  if(sum(dat$cad==1)>0){ppvCad=propEstBetaBayes(k=sum(dat$reference==1 & dat$cad==1),n=sum(dat$cad==1))$parameters}else{ppvCad=rep(NA,2)}
  if(sum(dat$cad==0)>0){npvCad=propEstBetaBayes(k=sum(dat$reference==0 & dat$cad==0),n=sum(dat$cad==0))$parameters}else{npvCad=rep(NA,2)}

  return(c(prevalenceTB,posPropHiv,sensHiv,specHiv,ppvHiv,npvHiv,posPropCrpPoc,sensCrpPoc,specCrpPoc,ppvCrpPoc,npvCrpPoc,posPropCrpRdt,sensCrpRdt,specCrpRdt,ppvCrpRdt,npvCrpRdt,posPropLamFuji,sensLamFuji,specLamFuji,ppvLamFuji,npvLamFuji,posPropXpertPooled,sensXpertPooled,specXpertPooled,ppvXpertPooled,npvXpertPooled,posPropCad,sensCad,specCad,ppvCad,npvCad))
}

dfResPrimBetaBayes<-data.frame(
  country=c(rep("Cameroon",4),rep("Nigeria",4),rep("Kenya",2),rep("Bangladesh",3),rep("Brazil",2),rep("Vietnam",3),rep("Malawi",1)),
  region=c(rep("",4+4+2+3),"Aracaju","Maceio",rep("",3+1)),
  setting=c("PHC","District","Informal settlements ACF","Children","PHC","District","Nomads","IDP / refugees","PHC","District","PHC","District","Informal settlements ACF","PHC","PHC","PHC","Informal settlements ACF","Children","PHC"),
  prevalenceTB_a=NA,
  prevalenceTB_b=NA,
  posPropHiv_a=NA,
  posPropHiv_b=NA,
  sensHiv_a=NA,
  sensHiv_b=NA,
  specHiv_a=NA,
  specHiv_b=NA,
  ppvHiv_a=NA,
  ppvHiv_b=NA,
  npvHiv_a=NA,
  npvHiv_b=NA,
  posPropCrpPoc_a=NA,
  posPropCrpPoc_b=NA,
  sensCrpPoc_a=NA,
  sensCrpPoc_b=NA,
  specCrpPoc_a=NA,
  specCrpPoc_b=NA,
  ppvCrpPoc_a=NA,
  ppvCrpPoc_b=NA,
  npvCrpPoc_a=NA,
  npvCrpPoc_b=NA,
  posPropCrpRdt_a=NA,
  posPropCrpRdt_b=NA,
  sensCrpRdt_a=NA,
  sensCrpRdt_b=NA,
  specCrpRdt_a=NA,
  specCrpRdt_b=NA,
  ppvCrpRdt_a=NA,
  ppvCrpRdt_b=NA,
  npvCrpRdt_a=NA,
  npvCrpRdt_b=NA,
  posPropLamFuji_a=NA,
  posPropLamFuji_b=NA,
  sensLamFuji_a=NA,
  sensLamFuji_b=NA,
  specLamFuji_a=NA,
  specLamFuji_b=NA,
  ppvLamFuji_a=NA,
  ppvLamFuji_b=NA,
  npvLamFuji_a=NA,
  npvLamFuji_b=NA,
  posPropXpertPooled_a=NA,
  posPropXpertPooled_b=NA,
  sensXpertPooled_a=NA,
  sensXpertPooled_b=NA,
  specXpertPooled_a=NA,
  specXpertPooled_b=NA,
  ppvXpertPooled_a=NA,
  ppvXpertPooled_b=NA,
  npvXpertPooled_a=NA,
  npvXpertPooled_b=NA,
  posPropCad_a=NA,
  posPropCad_b=NA,
  sensCad_a=NA,
  sensCad_b=NA,
  specCad_a=NA,
  specCad_b=NA,
  ppvCad_a=NA,
  ppvCad_b=NA,
  npvCad_a=NA,
  npvCad_b=NA
)

for(i in 1:nrow(dfResPrimBetaBayes)){
  dfResPrimBetaBayes[i,-(1:3)]<-analysisFunBayesBetaPars(dat=dfSim,c=dfResPrim$country[i],r=dfResPrim$region[i],s=dfResPrim$setting[i])
}
```

```{r primAnalBetaBayes}
#| label: tbl-primAnalBetaBayes
#| tbl-cap: "Best-fit beta distribution parameters for the unconditional probability parameters (Bayesian analysis)."

dfResPrimBetaBayes %>%
  dplyr::select(!country) %>%
  kable(row.names=FALSE,col.names=c("Region","Setting",rep(c("a","b"),31)),digits=4) %>%
  kable_styling(full_width=FALSE) %>%
  add_header_above(c(" "=2,"Prevalence of TB"=2,rep(c("Proportion of positive tests"=2,"Sensitivity"=2,"Specificity"=2,"PPV"=2,"NPV"=2),6))) %>%
  add_header_above(c(" "=4,"HIV"=10,"CRP POC"=10,"CRP RDT"=10,"Fuji LAM"=10,"Pooled Xpert"=10,"Digital chest X-ray + CAD"=10)) %>%
  pack_rows("Cameroon",1,4) %>%
  pack_rows("Nigeria",5,8) %>%
  pack_rows("Kenya",9,10) %>%
  pack_rows("Bangladesh",11,13) %>%
  pack_rows("Brazil",14,15) %>%
  pack_rows("Vietnam",16,18) %>%
  pack_rows("Malawi",19,19)
```

We can of course also derive point estimates and confidence intervals from the estimated posterior beta distributions. There is a bit of a choice how to do this. We will:

* Derive point estimates as the posterior mode, also called maximum a posteriori estimate. This is the value that maximises the posterior distribution (i.e. the most likely value under the posterior).

* Derive Bayesian confidence intervals (also called credible intervals) as the 95% highest posterior density intervals; i.e. the interval containing 95% of the posterior density such that no value inside the interval has lower density than any value outside the interval. (To note that highest density intervals are not always intervals if the distribution is multi-modal for example; for our case of a beta-binomial Bayesian model, the HDI will always be an interval as long as we have at least 1 data point -- at least one of the parameters of the posterior beta distribution is $\geq1$ in this case.)

```{r}
dfResPrimBayes<-data.frame(
  country=c(rep("Cameroon",4),rep("Nigeria",4),rep("Kenya",2),rep("Bangladesh",3),rep("Brazil",2),rep("Vietnam",3),rep("Malawi",1)),
  region=c(rep("",4+4+2+3),"Aracaju","Maceio",rep("",3+1)),
  setting=c("PHC","District","Informal settlements ACF","Children","PHC","District","Nomads","IDP / refugees","PHC","District","PHC","District","Informal settlements ACF","PHC","PHC","PHC","Informal settlements ACF","Children","PHC"),
  prevalenceTB=NA,
  posPropHiv=NA,
  sensHiv=NA,
  specHiv=NA,
  ppvHiv=NA,
  npvHiv=NA,
  posPropCrpPoc=NA,
  sensCrpPoc=NA,
  specCrpPoc=NA,
  ppvCrpPoc=NA,
  npvCrpPoc=NA,
  posPropCrpRdt=NA,
  sensCrpRdt=NA,
  specCrpRdt=NA,
  ppvCrpRdt=NA,
  npvCrpRdt=NA,
  posPropLamFuji=NA,
  sensLamFuji=NA,
  specLamFuji=NA,
  ppvLamFuji=NA,
  npvLamFuji=NA,
  posPropXpertPooled=NA,
  sensXpertPooled=NA,
  specXpertPooled=NA,
  ppvXpertPooled=NA,
  npvXpertPooled=NA,
  posPropCad=NA,
  sensCad=NA,
  specCad=NA,
  ppvCad=NA,
  npvCad=NA
)

propEstCiBayes<-function(n,k,prior_a=1/3,prior_b=1/3,d=1){
  tmp<-propEstBetaBayes(n=n,k=k,prior_a=prior_a,prior_b=prior_b)
  est<-format(nsmall=d,round(digits=d,100*tmp$estimate))
  ci<-format(nsmall=d,round(digits=d,100*tmp$ci))
  res<-paste(sep="",est,"% (",ci[1],"%,",ci[2],"%)")
  return(res)
}

analysisFunBayes<-function(dat,c,r,s){
  dat<-dat %>% dplyr::filter(country==c & region==r & setting==s)
  
  prevalenceTB=propEstCiBayes(k=sum(dat$reference),n=nrow(dat))
  posPropHiv=propEstCiBayes(k=sum(dat$crpPoc==1),n=nrow(dat))
  sensHiv=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$hiv==1),n=sum(dat$reference==1)),NA)
  specHiv=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$hiv==0),n=sum(dat$reference==0)),NA)
  ppvHiv=ifelse(sum(dat$hiv==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$hiv==1),n=sum(dat$hiv==1)),NA)
  npvHiv=ifelse(sum(dat$hiv==0)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$hiv==0),n=sum(dat$hiv==0)),NA)
  posPropCrpPoc=propEstCiBayes(k=sum(dat$crpPoc==1),n=nrow(dat))
  sensCrpPoc=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$crpPoc==1),n=sum(dat$reference==1)),NA)
  specCrpPoc=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$crpPoc==0),n=sum(dat$reference==0)),NA)
  ppvCrpPoc=ifelse(sum(dat$crpPoc==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$crpPoc==1),n=sum(dat$crpPoc==1)),NA)
  npvCrpPoc=ifelse(sum(dat$crpPoc==0)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$crpPoc==0),n=sum(dat$crpPoc==0)),NA)
  posPropCrpRdt=propEstCiBayes(k=sum(dat$crpRdt==1),n=nrow(dat))
  sensCrpRdt=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$crpRdt==1),n=sum(dat$reference==1)),NA)
  specCrpRdt=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$crpRdt==0),n=sum(dat$reference==0)),NA)
  ppvCrpRdt=ifelse(sum(dat$crpRdt==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$crpRdt==1),n=sum(dat$crpRdt==1)),NA)
  npvCrpRdt=ifelse(sum(dat$crpRdt==0)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$crpRdt==0),n=sum(dat$crpRdt==0)),NA)
  posPropLamFuji=propEstCiBayes(k=sum(dat$lamFuji==1),n=nrow(dat))
  sensLamFuji=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$lamFuji==1),n=sum(dat$reference==1)),NA)
  specLamFuji=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$lamFuji==0),n=sum(dat$reference==0)),NA)
  ppvLamFuji=ifelse(sum(dat$lamFuji==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$lamFuji==1),n=sum(dat$lamFuji==1)),NA)
  npvLamFuji=ifelse(sum(dat$lamFuji==0)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$lamFuji==0),n=sum(dat$lamFuji==0)),NA)
  posPropXpertPooled=propEstCiBayes(k=sum(dat$xpertPooled==1),n=nrow(dat))
  sensXpertPooled=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$xpertPooled==1),n=sum(dat$reference==1)),NA)
  specXpertPooled=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$xpertPooled==0),n=sum(dat$reference==0)),NA)
  ppvXpertPooled=ifelse(sum(dat$xpertPooled==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$xpertPooled==1),n=sum(dat$xpertPooled==1)),NA)
  npvXpertPooled=ifelse(sum(dat$xpertPooled==0)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$xpertPooled==0),n=sum(dat$xpertPooled==0)),NA)
  posPropCad=propEstCiBayes(k=sum(dat$cad==1),n=nrow(dat))
  sensCad=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$cad==1),n=sum(dat$reference==1)),NA)
  specCad=ifelse(sum(dat$reference==1)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$cad==0),n=sum(dat$reference==0)),NA)
  ppvCad=ifelse(sum(dat$cad==1)>0,propEstCiBayes(k=sum(dat$reference==1 & dat$cad==1),n=sum(dat$cad==1)),NA)
  npvCad=ifelse(sum(dat$cad==0)>0,propEstCiBayes(k=sum(dat$reference==0 & dat$cad==0),n=sum(dat$cad==0)),NA)
  
  return(c(prevalenceTB,posPropHiv,sensHiv,specHiv,ppvHiv,npvHiv,posPropCrpPoc,sensCrpPoc,specCrpPoc,ppvCrpPoc,npvCrpPoc,posPropCrpRdt,sensCrpRdt,specCrpRdt,ppvCrpRdt,npvCrpRdt,posPropLamFuji,sensLamFuji,specLamFuji,ppvLamFuji,npvLamFuji,posPropXpertPooled,sensXpertPooled,specXpertPooled,ppvXpertPooled,npvXpertPooled,posPropCad,sensCad,specCad,ppvCad,npvCad))
}

for(i in 1:nrow(dfResPrim)){
  dfResPrimBayes[i,-(1:3)]<-analysisFunBayes(dat=dfSim,c=dfResPrim$country[i],r=dfResPrim$region[i],s=dfResPrim$setting[i])
}

dfResPrimBayesPosProp<-dfResPrimBayes %>% dplyr::select(country,region,setting,prevalenceTB,posPropHiv,posPropCrpPoc,posPropCrpRdt,posPropLamFuji,posPropXpertPooled,posPropCad)
dfResPrimBayesSensSpec<-dfResPrimBayes %>% dplyr::select(country,region,setting,prevalenceTB,sensHiv,specHiv,sensCrpPoc,specCrpPoc,sensCrpRdt,specCrpRdt,sensLamFuji,specLamFuji,sensXpertPooled,specXpertPooled,sensCad,specCad)
dfResPrimBayesPpvNpv<-dfResPrimBayes %>% dplyr::select(country,region,setting,prevalenceTB,ppvHiv,npvHiv,ppvCrpPoc,npvCrpPoc,ppvCrpRdt,npvCrpRdt,ppvLamFuji,npvLamFuji,ppvXpertPooled,npvXpertPooled,ppvCad,npvCad)
```

For example, Bayesian estimates of sensitivity and specificity are shown in @tbl-primAnalBayesSensSpec.

```{r primAnalBayesSensSpec}
#| label: tbl-primAnalBayesSensSpec
#| tbl-cap: "Sensitivities and specificities of the evaluated tests (Bayesian analysis)."

dfResPrimBayesSensSpec %>%
  dplyr::select(!country) %>%
  kable(row.names=F,col.name=c("Region","Setting","TB prevalence",rep(c("Sensitivity","Specificity"),6)),caption="Numbers in brackets indicate exact binomial 95% confidence intervals.") %>%
  kable_styling(full_width=FALSE) %>%
  add_header_above(header=c(" "=3,"HIV"=2,"POC CRP"=2,"RDT CRP"=2,"Fuji LAM"=2,"Pooled Xpert"=2,"Digital chest X-ray + CAD"=2)) %>%
  pack_rows("Cameroon",1,4) %>%
  pack_rows("Nigeria",5,8) %>%
  pack_rows("Kenya",9,10) %>%
  pack_rows("Bangladesh",11,13) %>%
  pack_rows("Brazil",14,15) %>%
  pack_rows("Vietnam",16,18) %>%
  pack_rows("Malawi",19,19)
```



## Secondary objectives analyses

Secondary objectives will use the results from the primary analyses. At the stage gating the scientific advisory board will select the relevant combinations to take forward, while the health economic analysis (see separate analysis plan) will deal with the scale-up and cost-effectiveness objective.

**Jan15 discussion:** use optimisation criteria for classification models to identify the best combinations / sequences of tests?

# List of figures

# List of tables

@tbl-abbr: List of abbreviations

@tbl-countries: Summary of study populations, countries, and procedures.

@tbl-diagnostics: Summary of diagnostic assays evaluated in this study.

@tbl-sampSizeCalc: Sample size calculation for adults.

@tbl-sampSizeTableByCountry: Sample size for each survey.

@tbl-dataSim: 10 random rows from the simulated data.

@tbl-primAnalSensSpec: Sensitivities and specificities of the evaluated tests.

@tbl-primAnalPpvNpv: Positive and negative predictive values for the evaluated tests.

@tbl-primAnalPosProp: Proportions of positive test results for the evaluated tests.

@tbl-primAnalBeta: Best-fit beta distribution parameters for the unconditional probability parameters.

@tbl-primAnalAlgo: Results for an example screening algorithm. We only report the the beta distribution parameters for each estimated probability parameter.

@tbl-primAnalBetaBayes: Best-fit beta distribution parameters for the unconditional probability parameters (Bayesian analysis).

@tbl-primAnalBayesSensSpec: Sensitivities and specificities of the evaluated tests (Bayesian analysis).

# References
